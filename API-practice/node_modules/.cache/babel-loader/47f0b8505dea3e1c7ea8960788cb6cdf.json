{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sugar\\\\Desktop\\\\reactMaster\\\\API-practice\\\\api_practice\\\\src\\\\Users-useState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UsersState() {\n  _s();\n\n  const [users, setUsers] = useState(null); //loading: 현재 api가 요청중인지 아닌지 알려주는 값.\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    //액시오스사용\n    const fetchUsers = async () => {\n      try {\n        setUsers(null);\n        setError(null);\n        setLoading(true);\n        const response = await axios.get(\"https://jsonplaceholder.typicode.com/users/\");\n        setUsers(response.data);\n      } catch (e) {\n        //error발생시 해당error값 넣어줌\n        setError(e); //로딩 중 상태변경:로딩끝\n      }\n\n      setLoading(false);\n    };\n\n    fetchUsers();\n  }, []); //컴포넌트 처음 렌더링될 때 어떤 것 실행하게해줌\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529\\uC911 ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 23\n  }, this); ///로딩중일때 띄워줄 화면\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 21\n  }, this);\n  if (!users) return null; //로딩은 끝났는데 users값이 유효하지않을때 null반환 -> 아무것도 안보여줌\n  //이땐 users에 유효한 배열이 담겨있음\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [user.username, \" \\uC774\\uB984: \", user.name]\n    }, user.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UsersState, \"tq8fu1gobXtE39DyM7UStpaQx7k=\");\n\n_c = UsersState;\nexport default UsersState;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersState\");","map":{"version":3,"sources":["C:/Users/sugar/Desktop/reactMaster/API-practice/api_practice/src/Users-useState.js"],"names":["React","useState","useEffect","axios","UsersState","users","setUsers","loading","setLoading","error","setError","fetchUsers","response","get","data","e","map","user","username","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC,CADoB,CAEpB;;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMS,UAAU,GAAG,YAAY;AAC7B,UAAI;AACFL,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAMI,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CACrB,6CADqB,CAAvB;AAGAP,QAAAA,QAAQ,CAACM,QAAQ,CAACE,IAAV,CAAR;AACD,OARD,CAQE,OAAOC,CAAP,EAAU;AACV;AACAL,QAAAA,QAAQ,CAACK,CAAD,CAAR,CAFU,CAGV;AACD;;AACDP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAfD;;AAgBAG,IAAAA,UAAU;AACX,GAnBQ,EAmBN,EAnBM,CAAT,CANoB,CAyBZ;;AAER,MAAIJ,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CA3BO,CA2BoB;;AACxC,MAAIE,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAI,CAACJ,KAAL,EAAY,OAAO,IAAP,CA7BQ,CA6BK;AAEzB;;AACA,sBACE;AAAA,cACGA,KAAK,CAACW,GAAN,CAAWC,IAAD,iBACT;AAAA,iBACGA,IAAI,CAACC,QADR,qBACuBD,IAAI,CAACE,IAD5B;AAAA,OAASF,IAAI,CAACG,EAAd;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAzCQhB,U;;KAAAA,U;AA2CT,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction UsersState() {\r\n  const [users, setUsers] = useState(null);\r\n  //loading: 현재 api가 요청중인지 아닌지 알려주는 값.\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    //액시오스사용\r\n    const fetchUsers = async () => {\r\n      try {\r\n        setUsers(null);\r\n        setError(null);\r\n        setLoading(true);\r\n        const response = await axios.get(\r\n          \"https://jsonplaceholder.typicode.com/users/\"\r\n        );\r\n        setUsers(response.data);\r\n      } catch (e) {\r\n        //error발생시 해당error값 넣어줌\r\n        setError(e);\r\n        //로딩 중 상태변경:로딩끝\r\n      }\r\n      setLoading(false);\r\n    };\r\n    fetchUsers();\r\n  }, []); //컴포넌트 처음 렌더링될 때 어떤 것 실행하게해줌\r\n\r\n  if (loading) return <div>로딩중 ...</div>; ///로딩중일때 띄워줄 화면\r\n  if (error) return <div>에러가 발생했습니다</div>;\r\n  if (!users) return null; //로딩은 끝났는데 users값이 유효하지않을때 null반환 -> 아무것도 안보여줌\r\n\r\n  //이땐 users에 유효한 배열이 담겨있음\r\n  return (\r\n    <ul>\r\n      {users.map((user) => (\r\n        <li key={user.id}>\r\n          {user.username} 이름: {user.name}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default UsersState;\r\n"]},"metadata":{},"sourceType":"module"}