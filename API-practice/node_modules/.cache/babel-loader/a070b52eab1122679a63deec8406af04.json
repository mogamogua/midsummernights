{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sugar\\\\Desktop\\\\reactMaster\\\\API-practice\\\\api_practice\\\\src\\\\UsersContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useReducer, useContext } from \"react\"; // import axios from \"axios\";\n\nimport * as api from \"./api\";\nimport createAsyncDispatcher, { createAsyncHandler, initialAsyncState } from \"./asyncActionUtils\"; //api객체에 getUser, getUsers함수가 있당\n//각 함수 한줄로 작성가능.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  users: initialAsyncState,\n  user: initialAsyncState\n}; //6개의 액션 처리할 것임.\n//GET_USERS\n//GET_USERS_SUCCESS\n//GET_USERS_ERROR\n//GET_USER\n//GET_USER_SUCCESS\n//GET_USER_ERROR\n\nconst usersHandler = createAsyncHandler(\"GET_USERS\", \"users\");\nconst userHandler = createAsyncHandler(\"GET_USER\", \"user\");\n\nfunction usersReducer(state, action) {\n  switch (action.type) {\n    case \"GET_USERS\":\n    case \"GET_USERS_SUCCESS\":\n    case \"GET_USERS_ERROR\":\n      return usersHandler(state, action);\n\n    case \"GET_USER\":\n    case \"GET_USER_SUCCESS\":\n    case \"GET_USER_ERROR\":\n      return userHandler(state, action);\n\n    default:\n      throw new Error(\"Unhandled action type\", action.type);\n  }\n} //이걸 가지고 context만들자\n// state전용, dispatch전용 -. 따로 만들어야 컴포넌트 최적화에 용이하다.\n\n\nconst UsersStateContext = /*#__PURE__*/createContext(null); //상태를 위한 context\n\nconst UsersDispatchContext = /*#__PURE__*/createContext(null); //dispatch를 위한 context\n\nexport function UsersProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(usersReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(UsersStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(UsersDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UsersProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = UsersProvider;\nexport function useUsersState() {\n  _s2();\n\n  const state = useContext(UsersStateContext);\n\n  if (!state) {\n    throw new Error(\"Cannot find UserProvider\");\n  }\n\n  return state;\n}\n\n_s2(useUsersState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useUsersDispatch() {\n  _s3();\n\n  const dispatch = useContext(UsersDispatchContext);\n\n  if (!dispatch) {\n    throw new Error(\"Cannot find UserProvider\");\n  }\n\n  return dispatch;\n}\n\n_s3(useUsersDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nexport const getUsers = createAsyncDispatcher(\"GET_USERS\", api.getUsers);\nexport const getUser = createAsyncDispatcher(\"GET_USER\", api.getUser); // export async function getUsers(dispatch) {\n//   dispatch({ type: \"GET_USERS\" });\n//   try {\n//     const response = await axios.get(\n//       \"https://jsonplaceholder.typicode.com/users\"\n//     );\n//     dispatch({ type: \"GET_USERS_SUCCESS\", data: response.data });\n//   } catch (e) {\n//     dispatch({\n//       type: \"GET_USERS_ERROR\",\n//       error: e,\n//     });\n//   }\n// }\n// export async function getUser(dispatch, id) {\n//   dispatch({ type: \"GET_USER\" });\n//   try {\n//     const response = await axios.get(\n//       `https://jsonplaceholder.typicode.com/users/${id}`\n//     );\n//     dispatch({ type: \"GET_USER_SUCCESS\", data: response.data });\n//   } catch (e) {\n//     dispatch({\n//       type: \"GET_USER_ERROR\",\n//       error: e,\n//     });\n//   }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersProvider\");","map":{"version":3,"sources":["C:/Users/sugar/Desktop/reactMaster/API-practice/api_practice/src/UsersContext.js"],"names":["React","createContext","useReducer","useContext","api","createAsyncDispatcher","createAsyncHandler","initialAsyncState","initialState","users","user","usersHandler","userHandler","usersReducer","state","action","type","Error","UsersStateContext","UsersDispatchContext","UsersProvider","children","dispatch","useUsersState","useUsersDispatch","getUsers","getUser"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D,C,CACA;;AACA,OAAO,KAAKC,GAAZ,MAAqB,OAArB;AACA,OAAOC,qBAAP,IACEC,kBADF,EAEEC,iBAFF,QAGO,oBAHP,C,CAKA;AACA;;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEF,iBADY;AAEnBG,EAAAA,IAAI,EAAEH;AAFa,CAArB,C,CAKA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,YAAY,GAAGL,kBAAkB,CAAC,WAAD,EAAc,OAAd,CAAvC;AACA,MAAMM,WAAW,GAAGN,kBAAkB,CAAC,UAAD,EAAa,MAAb,CAAtC;;AAEA,SAASO,YAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACA,SAAK,mBAAL;AACA,SAAK,iBAAL;AACE,aAAOL,YAAY,CAACG,KAAD,EAAQC,MAAR,CAAnB;;AACF,SAAK,UAAL;AACA,SAAK,kBAAL;AACA,SAAK,gBAAL;AACE,aAAOH,WAAW,CAACE,KAAD,EAAQC,MAAR,CAAlB;;AACF;AACE,YAAM,IAAIE,KAAJ,CAAU,uBAAV,EAAmCF,MAAM,CAACC,IAA1C,CAAN;AAVJ;AAYD,C,CAED;AACA;;;AAEA,MAAME,iBAAiB,gBAAGjB,aAAa,CAAC,IAAD,CAAvC,C,CAA+C;;AAC/C,MAAMkB,oBAAoB,gBAAGlB,aAAa,CAAC,IAAD,CAA1C,C,CAAkD;;AAElD,OAAO,SAASmB,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAqC;AAAA;;AAC1C,QAAM,CAACP,KAAD,EAAQQ,QAAR,IAAoBpB,UAAU,CAACW,YAAD,EAAeL,YAAf,CAApC;AACA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEM,KAAnC;AAAA,2BACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAEQ,QAAtC;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GATeD,a;;KAAAA,a;AAWhB,OAAO,SAASG,aAAT,GAAyB;AAAA;;AAC9B,QAAMT,KAAK,GAAGX,UAAU,CAACe,iBAAD,CAAxB;;AACA,MAAI,CAACJ,KAAL,EAAY;AACV,UAAM,IAAIG,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,SAAOH,KAAP;AACD;;IANeS,a;;AAQhB,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,QAAMF,QAAQ,GAAGnB,UAAU,CAACgB,oBAAD,CAA3B;;AACA,MAAI,CAACG,QAAL,EAAe;AACb,UAAM,IAAIL,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,SAAOK,QAAP;AACD;;IANeE,gB;;AAQhB,OAAO,MAAMC,QAAQ,GAAGpB,qBAAqB,CAAC,WAAD,EAAcD,GAAG,CAACqB,QAAlB,CAAtC;AACP,OAAO,MAAMC,OAAO,GAAGrB,qBAAqB,CAAC,UAAD,EAAaD,GAAG,CAACsB,OAAjB,CAArC,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\r\n// import axios from \"axios\";\r\nimport * as api from \"./api\";\r\nimport createAsyncDispatcher, {\r\n  createAsyncHandler,\r\n  initialAsyncState,\r\n} from \"./asyncActionUtils\";\r\n\r\n//api객체에 getUser, getUsers함수가 있당\r\n//각 함수 한줄로 작성가능.\r\n\r\nconst initialState = {\r\n  users: initialAsyncState,\r\n  user: initialAsyncState,\r\n};\r\n\r\n//6개의 액션 처리할 것임.\r\n\r\n//GET_USERS\r\n//GET_USERS_SUCCESS\r\n//GET_USERS_ERROR\r\n//GET_USER\r\n//GET_USER_SUCCESS\r\n//GET_USER_ERROR\r\n\r\nconst usersHandler = createAsyncHandler(\"GET_USERS\", \"users\");\r\nconst userHandler = createAsyncHandler(\"GET_USER\", \"user\");\r\n\r\nfunction usersReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"GET_USERS\":\r\n    case \"GET_USERS_SUCCESS\":\r\n    case \"GET_USERS_ERROR\":\r\n      return usersHandler(state, action);\r\n    case \"GET_USER\":\r\n    case \"GET_USER_SUCCESS\":\r\n    case \"GET_USER_ERROR\":\r\n      return userHandler(state, action);\r\n    default:\r\n      throw new Error(\"Unhandled action type\", action.type);\r\n  }\r\n}\r\n\r\n//이걸 가지고 context만들자\r\n// state전용, dispatch전용 -. 따로 만들어야 컴포넌트 최적화에 용이하다.\r\n\r\nconst UsersStateContext = createContext(null); //상태를 위한 context\r\nconst UsersDispatchContext = createContext(null); //dispatch를 위한 context\r\n\r\nexport function UsersProvider({ children }) {\r\n  const [state, dispatch] = useReducer(usersReducer, initialState);\r\n  return (\r\n    <UsersStateContext.Provider value={state}>\r\n      <UsersDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </UsersDispatchContext.Provider>\r\n    </UsersStateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useUsersState() {\r\n  const state = useContext(UsersStateContext);\r\n  if (!state) {\r\n    throw new Error(\"Cannot find UserProvider\");\r\n  }\r\n  return state;\r\n}\r\n\r\nexport function useUsersDispatch() {\r\n  const dispatch = useContext(UsersDispatchContext);\r\n  if (!dispatch) {\r\n    throw new Error(\"Cannot find UserProvider\");\r\n  }\r\n  return dispatch;\r\n}\r\n\r\nexport const getUsers = createAsyncDispatcher(\"GET_USERS\", api.getUsers);\r\nexport const getUser = createAsyncDispatcher(\"GET_USER\", api.getUser);\r\n\r\n// export async function getUsers(dispatch) {\r\n//   dispatch({ type: \"GET_USERS\" });\r\n//   try {\r\n//     const response = await axios.get(\r\n//       \"https://jsonplaceholder.typicode.com/users\"\r\n//     );\r\n//     dispatch({ type: \"GET_USERS_SUCCESS\", data: response.data });\r\n//   } catch (e) {\r\n//     dispatch({\r\n//       type: \"GET_USERS_ERROR\",\r\n//       error: e,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// export async function getUser(dispatch, id) {\r\n//   dispatch({ type: \"GET_USER\" });\r\n//   try {\r\n//     const response = await axios.get(\r\n//       `https://jsonplaceholder.typicode.com/users/${id}`\r\n//     );\r\n//     dispatch({ type: \"GET_USER_SUCCESS\", data: response.data });\r\n//   } catch (e) {\r\n//     dispatch({\r\n//       type: \"GET_USER_ERROR\",\r\n//       error: e,\r\n//     });\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}