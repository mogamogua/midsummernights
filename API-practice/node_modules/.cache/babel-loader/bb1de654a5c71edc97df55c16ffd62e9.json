{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sugar\\\\Desktop\\\\reactMaster\\\\API-practice\\\\api_practice\\\\src\\\\Users.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useAsync } from \"react-async\";\nimport User from \"./User\"; //  \"https://jsonplaceholder.typicode.com/users/\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nasync function getUsers() {\n  const response = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n  return response.data;\n}\n\nfunction Users() {\n  _s();\n\n  const [state, refetch] = useAsync(getUsers, [], true);\n  const [userId, setUserId] = useState(null);\n  const {\n    loading,\n    data: users,\n    error\n  } = state;\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529\\uC911 ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 23\n  }, this); ///로딩중일때 띄워줄 화면\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 21\n  }, this);\n  if (!users) return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: refetch,\n    children: \"\\uBD88\\uB7EC\\uC624\\uAE30\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 22\n  }, this); //로딩은 끝났는데 users값이 유효하지않을때 null반환 -> 아무것도 안보여줌\n  //이땐 users에 유효한 배열이 담겨있음\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => setUserId(user.id),\n        children: [user.username, \" \", user.name]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: refetch,\n      children: \"\\uB2E4\\uC2DC\\uBD88\\uB7EC\\uC624\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), userId && /*#__PURE__*/_jsxDEV(User, {\n      id: userId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Users, \"K2/ODQiTZ069uX9C/AjPVRC9m44=\", false, function () {\n  return [useAsync];\n});\n\n_c = Users;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["C:/Users/sugar/Desktop/reactMaster/API-practice/api_practice/src/Users.js"],"names":["React","useState","axios","useAsync","User","getUsers","response","get","data","Users","state","refetch","userId","setUserId","loading","users","error","map","user","id","username","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;;;;AAEA,eAAeC,QAAf,GAA0B;AACxB,QAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CACrB,4CADqB,CAAvB;AAGA,SAAOD,QAAQ,CAACE,IAAhB;AACD;;AAED,SAASC,KAAT,GAAiB;AAAA;;AACf,QAAM,CAACC,KAAD,EAAQC,OAAR,IAAmBR,QAAQ,CAACE,QAAD,EAAW,EAAX,EAAe,IAAf,CAAjC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAM;AAAEa,IAAAA,OAAF;AAAWN,IAAAA,IAAI,EAAEO,KAAjB;AAAwBC,IAAAA;AAAxB,MAAkCN,KAAxC;AACA,MAAII,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CALE,CAKyB;;AACxC,MAAIE,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAI,CAACD,KAAL,EAAY,oBAAO;AAAQ,IAAA,OAAO,EAAEJ,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CAPG,CAO6C;AAE5D;;AACA,sBACE;AAAA,4BACE;AAAA,gBACGI,KAAK,CAACE,GAAN,CAAWC,IAAD,iBACT;AAAkB,QAAA,OAAO,EAAE,MAAML,SAAS,CAACK,IAAI,CAACC,EAAN,CAA1C;AAAA,mBACGD,IAAI,CAACE,QADR,OACmBF,IAAI,CAACG,IADxB;AAAA,SAASH,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAQE;AAAQ,MAAA,OAAO,EAAER,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,EASGC,MAAM,iBAAI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAEA;AAAV;AAAA;AAAA;AAAA;AAAA,YATb;AAAA,kBADF;AAaD;;GAvBQH,K;UACkBN,Q;;;KADlBM,K;AAyBT,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useAsync } from \"react-async\";\r\nimport User from \"./User\";\r\n\r\n//  \"https://jsonplaceholder.typicode.com/users/\"\r\n\r\nasync function getUsers() {\r\n  const response = await axios.get(\r\n    \"https://jsonplaceholder.typicode.com/users\"\r\n  );\r\n  return response.data;\r\n}\r\n\r\nfunction Users() {\r\n  const [state, refetch] = useAsync(getUsers, [], true);\r\n  const [userId, setUserId] = useState(null);\r\n\r\n  const { loading, data: users, error } = state;\r\n  if (loading) return <div>로딩중 ...</div>; ///로딩중일때 띄워줄 화면\r\n  if (error) return <div>에러가 발생했습니다</div>;\r\n  if (!users) return <button onClick={refetch}>불러오기</button>; //로딩은 끝났는데 users값이 유효하지않을때 null반환 -> 아무것도 안보여줌\r\n\r\n  //이땐 users에 유효한 배열이 담겨있음\r\n  return (\r\n    <>\r\n      <ul>\r\n        {users.map((user) => (\r\n          <li key={user.id} onClick={() => setUserId(user.id)}>\r\n            {user.username} {user.name}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={refetch}>다시불러오기</button>\r\n      {userId && <User id={userId} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Users;\r\n"]},"metadata":{},"sourceType":"module"}