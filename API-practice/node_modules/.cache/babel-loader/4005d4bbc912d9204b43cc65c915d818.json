{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sugar\\\\Desktop\\\\reactMaster\\\\API-practice\\\\api_practice\\\\src\\\\Users.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // import axios from \"axios\";\n// import { useAsync } from \"react-async\";\n\nimport User from \"./User\";\nimport { getUsers, useUsersDispatch } from \"./UserContext\";\nimport { useUsersState } from \"./UserContext\"; //react-async는 옵션이 다양해서 헷갈릴 수 있다.\n//  \"https://jsonplaceholder.typicode.com/users/\"\n// async function getUsers() {\n// const response = await axios.get(\n//   \"https://jsonplaceholder.typicode.com/users\"\n// );\n// return response.data;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Users() {\n  _s();\n\n  const [userId, setUserId] = useState(null);\n  const state = useUsersState();\n  const dispatch = useUsersDispatch(); // const {\n  //   data: users,\n  //   error,\n  //   isLoading,\n  //   reload,\n  //   run,\n  // } = useAsync({\n  //   // promiseFn: getUsers,\n  //   deferFn: getUsers, // 바로 안불러오고 특정버튼 누르면 불러오게 하고 싶을 때 runㅇ로.\n  // });\n\n  const {\n    loading,\n    data: users,\n    error\n  } = state.users;\n\n  const fetchData = () => {\n    getUsers(dispatch);\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529\\uC911 ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 23\n  }, this); ///로딩중일때 띄워줄 화면\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 21\n  }, this);\n  if (!users) return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: fetchData,\n    children: \"\\uBD88\\uB7EC\\uC624\\uAE30\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 22\n  }, this); //로딩은 끝났는데 users값이 유효하지않을때 null반환 -> 아무것도 안보여줌\n  //이땐 users에 유효한 배열이 담겨있음\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => setUserId(user.id),\n        children: [user.username, \" \", user.name]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchData,\n      children: \"\\uB2E4\\uC2DC\\uBD88\\uB7EC\\uC624\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), userId && /*#__PURE__*/_jsxDEV(User, {\n      id: userId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Users, \"26/Kw27FW1XfvVgOjjnvixmTOZs=\", false, function () {\n  return [useUsersState, useUsersDispatch];\n});\n\n_c = Users;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["C:/Users/sugar/Desktop/reactMaster/API-practice/api_practice/src/Users.js"],"names":["React","useState","User","getUsers","useUsersDispatch","useUsersState","Users","userId","setUserId","state","dispatch","loading","data","users","error","fetchData","map","user","id","username","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;AACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,eAA3C;AACA,SAASC,aAAT,QAA8B,eAA9B,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACf,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,IAAD,CAApC;AACA,QAAMQ,KAAK,GAAGJ,aAAa,EAA3B;AACA,QAAMK,QAAQ,GAAGN,gBAAgB,EAAjC,CAHe,CAKf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC,KAAjB;AAAwBC,IAAAA;AAAxB,MAAkCL,KAAK,CAACI,KAA9C;;AAEA,QAAME,SAAS,GAAG,MAAM;AACtBZ,IAAAA,QAAQ,CAACO,QAAD,CAAR;AACD,GAFD;;AAIA,MAAIC,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CAtBE,CAsByB;;AACxC,MAAIG,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAI,CAACD,KAAL,EAAY,oBAAO;AAAQ,IAAA,OAAO,EAAEE,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CAxBG,CAwB+C;AAE9D;;AACA,sBACE;AAAA,4BACE;AAAA,gBACGF,KAAK,CAACG,GAAN,CAAWC,IAAD,iBACT;AAAkB,QAAA,OAAO,EAAE,MAAMT,SAAS,CAACS,IAAI,CAACC,EAAN,CAA1C;AAAA,mBACGD,IAAI,CAACE,QADR,OACmBF,IAAI,CAACG,IADxB;AAAA,SAASH,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAQE;AAAQ,MAAA,OAAO,EAAEH,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,EASGR,MAAM,iBAAI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAEA;AAAV;AAAA;AAAA;AAAA;AAAA,YATb;AAAA,kBADF;AAaD;;GAxCQD,K;UAEOD,a,EACGD,gB;;;KAHVE,K;AA0CT,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useAsync } from \"react-async\";\r\nimport User from \"./User\";\r\nimport { getUsers, useUsersDispatch } from \"./UserContext\";\r\nimport { useUsersState } from \"./UserContext\";\r\n\r\n//react-async는 옵션이 다양해서 헷갈릴 수 있다.\r\n//  \"https://jsonplaceholder.typicode.com/users/\"\r\n\r\n// async function getUsers() {\r\n// const response = await axios.get(\r\n//   \"https://jsonplaceholder.typicode.com/users\"\r\n// );\r\n// return response.data;\r\n// }\r\n\r\nfunction Users() {\r\n  const [userId, setUserId] = useState(null);\r\n  const state = useUsersState();\r\n  const dispatch = useUsersDispatch();\r\n\r\n  // const {\r\n  //   data: users,\r\n  //   error,\r\n  //   isLoading,\r\n  //   reload,\r\n  //   run,\r\n  // } = useAsync({\r\n  //   // promiseFn: getUsers,\r\n  //   deferFn: getUsers, // 바로 안불러오고 특정버튼 누르면 불러오게 하고 싶을 때 runㅇ로.\r\n  // });\r\n\r\n  const { loading, data: users, error } = state.users;\r\n\r\n  const fetchData = () => {\r\n    getUsers(dispatch);\r\n  };\r\n\r\n  if (loading) return <div>로딩중 ...</div>; ///로딩중일때 띄워줄 화면\r\n  if (error) return <div>에러가 발생했습니다</div>;\r\n  if (!users) return <button onClick={fetchData}>불러오기</button>; //로딩은 끝났는데 users값이 유효하지않을때 null반환 -> 아무것도 안보여줌\r\n\r\n  //이땐 users에 유효한 배열이 담겨있음\r\n  return (\r\n    <>\r\n      <ul>\r\n        {users.map((user) => (\r\n          <li key={user.id} onClick={() => setUserId(user.id)}>\r\n            {user.username} {user.name}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={fetchData}>다시불러오기</button>\r\n      {userId && <User id={userId} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Users;\r\n"]},"metadata":{},"sourceType":"module"}