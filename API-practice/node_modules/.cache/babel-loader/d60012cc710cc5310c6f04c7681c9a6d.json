{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sugar\\\\Desktop\\\\reactMaster\\\\API-practice\\\\api_practice\\\\src\\\\User.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useAsync } from \"react-async\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nasync function getUser({\n  id\n}) {\n  const response = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n  return response.data;\n}\n\nfunction User({\n  id\n}) {\n  _s();\n\n  const {\n    data: user,\n    error,\n    isLoading\n  } = useAsync({\n    promiseFn: getUser,\n    //promise반환하는 함수넣어주기\n    id,\n    // 처음 렌더링 될 때 getUser에 id값을 넣어서 호출\n    watch: id //id값이 바뀔 때마다 함수가 호출하겠다 (deps에 [id]넣는것과 같음)\n\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529\\uC911...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 21\n  }, this);\n  if (!user) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"Email: \", user.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(User, \"/MtIhTQSyOiEQNWDzO2ITYI8Z4k=\", false, function () {\n  return [useAsync];\n});\n\n_c = User;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["C:/Users/sugar/Desktop/reactMaster/API-practice/api_practice/src/User.js"],"names":["React","axios","useAsync","getUser","id","response","get","data","User","user","error","isLoading","promiseFn","watch","loading","username","email"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;;;;AAEA,eAAeC,OAAf,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAA+B;AAC7B,QAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CACpB,8CAA6CF,EAAG,EAD5B,CAAvB;AAGA,SAAOC,QAAQ,CAACE,IAAhB;AACD;;AAED,SAASC,IAAT,CAAc;AAAEJ,EAAAA;AAAF,CAAd,EAAsB;AAAA;;AACpB,QAAM;AACJG,IAAAA,IAAI,EAAEE,IADF;AAEJC,IAAAA,KAFI;AAGJC,IAAAA;AAHI,MAIFT,QAAQ,CAAC;AACXU,IAAAA,SAAS,EAAET,OADA;AACS;AACpBC,IAAAA,EAFW;AAEP;AACJS,IAAAA,KAAK,EAAET,EAHI,CAGA;;AAHA,GAAD,CAJZ;AAUA,MAAIU,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIJ,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAI,CAACD,IAAL,EAAW,OAAO,IAAP;AAEX,sBACE;AAAA,2BACE;AAAA,8BACE;AAAA,kBAAKA,IAAI,CAACM;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,+BACE;AAAA,gCAAWN,IAAI,CAACO,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAUD;;GAzBQR,I;UAKHN,Q;;;KALGM,I;AA2BT,eAAeA,IAAf","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useAsync } from \"react-async\";\r\n\r\nasync function getUser({ id }) {\r\n  const response = await axios.get(\r\n    `https://jsonplaceholder.typicode.com/users/${id}`\r\n  );\r\n  return response.data;\r\n}\r\n\r\nfunction User({ id }) {\r\n  const {\r\n    data: user,\r\n    error,\r\n    isLoading,\r\n  } = useAsync({\r\n    promiseFn: getUser, //promise반환하는 함수넣어주기\r\n    id, // 처음 렌더링 될 때 getUser에 id값을 넣어서 호출\r\n    watch: id, //id값이 바뀔 때마다 함수가 호출하겠다 (deps에 [id]넣는것과 같음)\r\n  });\r\n\r\n  if (loading) return <div>로딩중...</div>;\r\n  if (error) return <div>에러가 발생했습니다.</div>;\r\n  if (!user) return null;\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <h2>{user.username}</h2>\r\n        <p>\r\n          <b>Email: {user.email}</b>\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default User;\r\n"]},"metadata":{},"sourceType":"module"}