{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sugar\\\\Desktop\\\\reactMaster\\\\API-practice\\\\api_practice\\\\src\\\\Users.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\";\nimport axios from \"axios\"; //LOADING, SUCCESS, ERROR\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"LOADING\":\n      return {\n        loading: true,\n        data: null,\n        error: null\n      };\n\n    case \"SUCCESS\":\n      return {\n        loading: false,\n        data: action.data,\n        error: null\n      };\n\n    case \"ERROR\":\n      return {\n        loading: false,\n        data: false,\n        error: action.error\n      };\n\n    default:\n      throw new Error(\"Unhandled action type:\" + action.type);\n  }\n}\n\nfunction Users() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    loading: false,\n    data: null,\n    error: null\n  });\n\n  const fetchUsers = async () => {\n    dispatch({\n      type: \"LOADING\"\n    });\n\n    try {\n      const response = await axios.get(\"https://jsonplaceholder.typicode.com/users/\");\n      dispatch({\n        type: \"SUCCESS\",\n        data: response.data\n      });\n    } catch (e) {\n      dispatch({\n        type: \"ERROR\",\n        error: e\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []); //컴포넌트 처음 렌더링될 때 어떤 것 실행하게해줌\n\n  const {\n    loading,\n    data: users,\n    error\n  } = state;\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529\\uC911 ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 23\n  }, this); ///로딩중일때 띄워줄 화면\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 21\n  }, this);\n  if (!users) return null; //로딩은 끝났는데 users값이 유효하지않을때 null반환 -> 아무것도 안보여줌\n  //이땐 users에 유효한 배열이 담겨있음\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [user.username, \" \", user.name]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onCilck: fetchUsers,\n      children: \"\\uB2E4\\uC2DC\\uBD88\\uB7EC\\uC624\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Users, \"oN1ube6gDvMEeuiom/UA5SDdoj8=\");\n\n_c = Users;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["C:/Users/sugar/Desktop/reactMaster/API-practice/api_practice/src/Users.js"],"names":["React","useEffect","useReducer","axios","reducer","state","action","type","loading","data","error","Error","Users","dispatch","fetchUsers","response","get","e","users","map","user","username","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAO;AACLC,QAAAA,OAAO,EAAE,IADJ;AAELC,QAAAA,IAAI,EAAE,IAFD;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,SAAL;AACE,aAAO;AACLF,QAAAA,OAAO,EAAE,KADJ;AAELC,QAAAA,IAAI,EAAEH,MAAM,CAACG,IAFR;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,OAAL;AACE,aAAO;AACLF,QAAAA,OAAO,EAAE,KADJ;AAELC,QAAAA,IAAI,EAAE,KAFD;AAGLC,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAHT,OAAP;;AAKF;AACE,YAAM,IAAIC,KAAJ,CAAU,2BAA2BL,MAAM,CAACC,IAA5C,CAAN;AApBJ;AAsBD;;AAED,SAASK,KAAT,GAAiB;AAAA;;AACf,QAAM,CAACP,KAAD,EAAQQ,QAAR,IAAoBX,UAAU,CAACE,OAAD,EAAU;AAC5CI,IAAAA,OAAO,EAAE,KADmC;AAE5CC,IAAAA,IAAI,EAAE,IAFsC;AAG5CC,IAAAA,KAAK,EAAE;AAHqC,GAAV,CAApC;;AAMA,QAAMI,UAAU,GAAG,YAAY;AAC7BD,IAAAA,QAAQ,CAAC;AAAEN,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACF,YAAMQ,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CACrB,6CADqB,CAAvB;AAGAH,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAE,SAAR;AAAmBE,QAAAA,IAAI,EAAEM,QAAQ,CAACN;AAAlC,OAAD,CAAR;AACD,KALD,CAKE,OAAOQ,CAAP,EAAU;AACVJ,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAE,OAAR;AAAiBG,QAAAA,KAAK,EAAEO;AAAxB,OAAD,CAAR;AACD;AACF,GAVD;;AAYAhB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT,CAnBe,CAqBP;;AAER,QAAM;AAAEN,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAES,KAAjB;AAAwBR,IAAAA;AAAxB,MAAkCL,KAAxC;AAEA,MAAIG,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CAzBE,CAyByB;;AACxC,MAAIE,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAI,CAACQ,KAAL,EAAY,OAAO,IAAP,CA3BG,CA2BU;AAEzB;;AACA,sBACE;AAAA,4BACE;AAAA,gBACGA,KAAK,CAACC,GAAN,CAAWC,IAAD,iBACT;AAAA,mBACGA,IAAI,CAACC,QADR,OACmBD,IAAI,CAACE,IADxB;AAAA,SAASF,IAAI,CAACG,EAAd;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAQE;AAAQ,MAAA,OAAO,EAAET,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAYD;;GA1CQF,K;;KAAAA,K;AA4CT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n//LOADING, SUCCESS, ERROR\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"LOADING\":\r\n      return {\r\n        loading: true,\r\n        data: null,\r\n        error: null,\r\n      };\r\n    case \"SUCCESS\":\r\n      return {\r\n        loading: false,\r\n        data: action.data,\r\n        error: null,\r\n      };\r\n    case \"ERROR\":\r\n      return {\r\n        loading: false,\r\n        data: false,\r\n        error: action.error,\r\n      };\r\n    default:\r\n      throw new Error(\"Unhandled action type:\" + action.type);\r\n  }\r\n}\r\n\r\nfunction Users() {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    loading: false,\r\n    data: null,\r\n    error: null,\r\n  });\r\n\r\n  const fetchUsers = async () => {\r\n    dispatch({ type: \"LOADING\" });\r\n    try {\r\n      const response = await axios.get(\r\n        \"https://jsonplaceholder.typicode.com/users/\"\r\n      );\r\n      dispatch({ type: \"SUCCESS\", data: response.data });\r\n    } catch (e) {\r\n      dispatch({ type: \"ERROR\", error: e });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []); //컴포넌트 처음 렌더링될 때 어떤 것 실행하게해줌\r\n\r\n  const { loading, data: users, error } = state;\r\n\r\n  if (loading) return <div>로딩중 ...</div>; ///로딩중일때 띄워줄 화면\r\n  if (error) return <div>에러가 발생했습니다</div>;\r\n  if (!users) return null; //로딩은 끝났는데 users값이 유효하지않을때 null반환 -> 아무것도 안보여줌\r\n\r\n  //이땐 users에 유효한 배열이 담겨있음\r\n  return (\r\n    <>\r\n      <ul>\r\n        {users.map((user) => (\r\n          <li key={user.id}>\r\n            {user.username} {user.name}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button onCilck={fetchUsers}>다시불러오기</button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Users;\r\n"]},"metadata":{},"sourceType":"module"}